/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var piethon = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,10],$V1=[10,30,31,49],$V2=[2,31],$V3=[1,9],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,14],$V8=[1,18],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,10,13,17,18,20,21,22,23,24,30,31,49],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[7,10,15,16,27,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,49],$Vq=[2,48],$Vr=[1,47],$Vs=[2,6],$Vt=[15,27],$Vu=[1,89],$Vv=[1,90],$Vw=[7,10,15,16,27,30,31,34,35,36,49],$Vx=[7,10,15,16,27,30,31,34,35,36,37,39,40,49],$Vy=[10,13,17,18,21,24,30,31,49];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"startproduction":3,"stmt":4,"parm_list":5,"id":6,",":7,"num":8,"line":9,"CR":10,"selection":11,"funcdef":12,"def":13,"(":14,")":15,":":16,"end":17,"if":18,"expr":19,"else":20,"while":21,"break":22,"continue":23,"for":24,"in":25,"[":26,"]":27,"=":28,".":29,"print":30,"return":31,"{":32,"dict_list":33,"}":34,"+":35,"-":36,"*":37,"**":38,"/":39,"%":40,"<":41,"<=":42,">":43,">=":44,"!=":45,"==":46,"len":47,"STRING":48,"IDENT":49,"NUMBER":50,"$accept":0,"$end":1},
terminals_: {2:"error",7:",",10:"CR",13:"def",14:"(",15:")",16:":",17:"end",18:"if",20:"else",21:"while",22:"break",23:"continue",24:"for",25:"in",26:"[",27:"]",28:"=",29:".",30:"print",31:"return",32:"{",34:"}",35:"+",36:"-",37:"*",38:"**",39:"/",40:"%",41:"<",42:"<=",43:">",44:">=",45:"!=",46:"==",47:"len",48:"STRING",49:"IDENT",50:"NUMBER"},
productions_: [0,[3,1],[5,1],[5,3],[5,1],[5,3],[5,0],[4,3],[4,3],[4,3],[4,0],[12,8],[11,5],[11,8],[11,5],[11,7],[11,13],[11,7],[11,13],[11,7],[11,9],[9,4],[9,7],[9,5],[9,7],[9,6],[9,7],[9,6],[9,3],[9,3],[9,6],[9,0],[33,3],[33,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[19,1],[19,4],[19,4],[19,1],[6,1],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		finalprogram = $$[$0];
		// Maybe remove all function branches?, then execute the one statement
	
break;
case 2:

		this.$ = [];
		this.$.push({name : $$[$0], value : null})
	
break;
case 3:

		$$[$0].push({name : $$[$0-2], value : null})
		this.$ = $$[$0];
	
break;
case 4:

		this.$ = [];
		this.$.push({name : null, value : $$[$0]})
	
break;
case 5:

		$$[$0].push({name : null, value : $$[$0-2]})
		this.$ = $$[$0];
	
break;
case 6:
 this.$ = []; 
break;
case 7: case 8:

		this.$ = new AstNode('Statement', {left : $$[$0-2], right :$$[$0-1]});
	
break;
case 9:

		this.$ = new AstNode('Statement', {left : $$[$0-2], right : new AstNode('no-op') });
	
break;
case 10: case 31:
 this.$ = new AstNode('no-op'); 
break;
case 11:

		// AST for function, add to function table
		var mainFunc = new AstNode('function', {left : $$[$0-1], name : $$[$0-6], parameters : $$[$0-4].reverse()});
		functions[$$[$0-6]] = mainFunc;
	
break;
case 12:

		this.$ = new AstNode('if', {left : $$[$0-3], right : $$[$0-1]});
	
break;
case 13:

		this.$ = new AstNode('ifelse', {left : $$[$0-6], middle: $$[$0-4],right: $$[$0-1]});
	
break;
case 14:

		this.$ = new AstNode('while', {left : $$[$0-3], right:$$[$0-1]});
	
break;
case 15:

		this.$ = new AstNode('whilebreak', {left : $$[$0-5], middle:$$[$0-3], right:$$[$0-1]});
	
break;
case 16:

		var rf= new AstNode('ifbreak', {left : $$[$0-7], middle : $$[$0-5], right: $$[$0-1]});
		this.$ = new AstNode('whileifbreak', {left : $$[$0-11], middle: $$[$0-9], right:rf});
	
break;
case 17:

		this.$ = new AstNode('whilecontinue', {left : $$[$0-5], middle:$$[$0-3], right:$$[$0-1]});
	
break;
case 18:

		var rf= new AstNode('ifcontinue', {left : $$[$0-7], middle : $$[$0-5], right: $$[$0-1]});
		this.$ = new AstNode('whileifcontinue', {left : $$[$0-11], middle: $$[$0-9], right:rf});
	
break;
case 19:

		var iterName = new AstNode('IDENT', {name : $$[$0-5]});
		var arrName = new AstNode('IDENT', {name : $$[$0-3]});
		this.$ = new AstNode('for', {left : iterName, middle : arrName, right : $$[$0-1]})
	
break;
case 20:

		var iterName = new AstNode('IDENT', {name : $$[$0-7]});
		var arrValue = new AstNode('array', {value : $$[$0-4].reverse()});
		var iterIdent = new AstNode('IDENT', {name: "###forList###"});
		var createList = new AstNode('=', {left : iterIdent, right : arrValue});
		this.$ = new AstNode('forimmelist', {left : iterName, middle : createList, right : $$[$0-1]});
	
break;
case 21:

		// Identifier assigment
		var lf= new AstNode('IDENT', {name : $$[$0-2]});
		this.$ = new AstNode('=', {left : lf, right : $$[$0]});
	
break;
case 22:

		// Assignment of an array index
		var lf  = new AstNode('arrayindex', {name : $$[$0-5], index : $$[$0-3]});
		this.$ = new AstNode('=', {left : lf, right : $$[$0]});
	
break;
case 23:

		// Function call
		this.$ = new AstNode('FunctionCall', {name : $$[$0-3], parameters : $$[$0-1].reverse()});
	
break;
case 24:

		// Function call and assign
		var lf= new AstNode('IDENT', {name : $$[$0-5]});
		var call = new AstNode('FunctionCall', {name : $$[$0-3], parameters : $$[$0-1].reverse()});
		this.$ = new AstNode('=', {left : lf, right : call});
	
break;
case 25:

		// Array creation and assignment
		var lf= new AstNode('IDENT', {name : $$[$0-4]});
		var arr = new AstNode('array', {value : $$[$0-1].reverse()});
		this.$ = new AstNode('=', {left :lf, right : arr});
	
break;
case 26:

		// Method dispatch, with single argument
		this.$ = new AstNode('method', { name : $$[$0-5], method : $$[$0-3], argument : $$[$0-1]});
	
break;
case 27:

		// No argument method dispatch
		this.$ = new AstNode('method', { name : $$[$0-4], method : $$[$0-2]});
	
break;
case 28:

		// Print statement
		this.$ = new AstNode('print', {left : $$[$0]});
	
break;
case 29:

		// Return statement
		this.$ = new AstNode('return', {left : $$[$0]});
	
break;
case 30:

		// dict creation and assignment
		var lf= new AstNode('IDENT', {name : $$[$0-4]});
		var dict = new AstNode('dict', {value : $$[$0-1].reverse()});
		this.$ = new AstNode('=', {left :lf, right : dict});
	
break;
case 32:

		this.$ = [];
		this.$.push({name : $$[$0-2], value : $$[$0]})
	
break;
case 33:

		$$[$0].push({name : $$[$0-4], value : $$[$0-2]})
		this.$ = $$[$0];
	
break;
case 34:
 this.$ = new AstNode('+', {left : $$[$0-2], right : $$[$0]}); 
break;
case 35:
 this.$ = new AstNode('-', {left : $$[$0-2], right : $$[$0]});
break;
case 36:
 this.$ = new AstNode('*', {left : $$[$0-2], right : $$[$0]});
break;
case 37:
 this.$ = new AstNode('**', {left : $$[$0-2], right : $$[$0]});
break;
case 38:
 this.$ = new AstNode('/', {left : $$[$0-2], right : $$[$0]});
break;
case 39:
 this.$ = new AstNode('%', {left : $$[$0-2], right : $$[$0]});
break;
case 40:
 this.$ = new AstNode('<', {left : $$[$0-2], right : $$[$0]});
break;
case 41:
 this.$ = new AstNode('<=', {left : $$[$0-2], right : $$[$0]});
break;
case 42:
 this.$ = new AstNode('>', {left : $$[$0-2], right : $$[$0]});
break;
case 43:
 this.$ = new AstNode('>=', {left : $$[$0-2], right : $$[$0]});
break;
case 44:
 this.$ = new AstNode('!=', {left : $$[$0-2], right : $$[$0]});
break;
case 45:
 this.$ = new AstNode('==', {left : $$[$0-2], right : $$[$0]});
break;
case 46:
 this.$ = new AstNode('UMINUS', {left : $$[$0]}); 
break;
case 47:
 this.$ = new AstNode('NUMBER', {value : $$[$0]}); 
break;
case 48:
 this.$ = new AstNode('IDENT', {name : $$[$0]});	
break;
case 49:
 this.$ = new AstNode('arrayindex', {name : $$[$0-3], index : $$[$0-1]}); 
break;
case 50:
this.$ = new AstNode('len', {name : $$[$0-1]});
break;
case 51:
this.$ = new AstNode('STRING', {value: yytext}); 
break;
case 52:
this.$ = yytext;
break;
case 53:
this.$ = Number(yytext);
break;
}
},
table: [o([1,10,13,18,21,24,30,31,49],$V0,{3:1,4:2}),{1:[3]},o($V1,$V2,{9:3,11:4,12:5,1:[2,1],13:$V3,18:$V4,21:$V5,24:$V6}),{6:11,10:[1,10],30:[1,12],31:[1,13],49:$V7},{10:[1,15]},{10:[1,16]},{6:20,8:19,19:17,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:24,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:25,49:$V7},{6:26,49:$V7},o($Vc,[2,7]),{14:[1,29],26:[1,28],28:[1,27],29:[1,30]},{6:20,8:19,19:31,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:32,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},o([7,10,14,15,16,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,49],[2,52]),o($Vc,[2,8]),o($Vc,[2,9]),{16:[1,33],35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{6:20,8:19,19:46,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},o($Vp,[2,47]),o($Vp,$Vq,{26:$Vr}),{14:[1,48]},o($Vp,[2,51]),o($Vp,[2,53]),{16:[1,49],35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{25:[1,50]},{14:[1,51]},{6:53,8:19,19:52,26:[1,54],32:[1,55],36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:56,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{5:57,6:58,8:59,15:$Vs,49:$V7,50:$Vb},{6:60,49:$V7},o($V1,[2,28],{35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o($V1,[2,29],{35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o([10,13,17,18,20,21,24,30,31,49],$V0,{4:61}),{6:20,8:19,19:62,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:63,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:64,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:65,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:66,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:67,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:68,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:69,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:70,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:71,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:72,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:73,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},o($Vp,[2,46]),{6:20,8:19,19:74,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:75,49:$V7},o([10,13,17,18,21,22,23,24,30,31,49],$V0,{4:76}),{6:77,26:[1,78],49:$V7},{5:79,6:58,8:59,15:$Vs,49:$V7,50:$Vb},o($V1,[2,21],{35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o([10,30,31,35,36,37,38,39,40,41,42,43,44,45,46,49],$Vq,{14:[1,80],26:$Vr}),{5:81,6:58,8:59,27:$Vs,49:$V7,50:$Vb},{6:20,8:19,19:83,33:82,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{27:[1,84],35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{15:[1,85]},o($Vt,[2,2],{7:[1,86]}),o($Vt,[2,4],{7:[1,87]}),{14:[1,88]},o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:$Vu,18:$V4,20:$Vv,21:$V5,24:$V6}),o($Vw,[2,34],{37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o($Vw,[2,35],{37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o($Vx,[2,36],{38:$Vg,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o($Vx,[2,37],{38:$Vg,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o($Vx,[2,38],{38:$Vg,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o($Vx,[2,39],{38:$Vg,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o($Vp,[2,40]),o($Vp,[2,41]),o($Vp,[2,42]),o($Vp,[2,43]),o($Vp,[2,44]),o($Vp,[2,45]),{27:[1,91],35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{15:[1,92]},o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,93],18:[1,95],21:$V5,22:[1,94],23:[1,96],24:$V6}),{16:[1,97]},{5:98,6:58,8:59,27:$Vs,49:$V7,50:$Vb},{15:[1,99]},{5:100,6:58,8:59,15:$Vs,49:$V7,50:$Vb},{27:[1,101]},{34:[1,102]},{16:[1,103],35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{28:[1,104]},o($V1,[2,23]),o($Vt,$Vs,{6:58,8:59,5:105,49:$V7,50:$Vb}),o($Vt,$Vs,{6:58,8:59,5:106,49:$V7,50:$Vb}),{6:20,8:19,15:[1,108],19:107,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{10:[2,12]},{16:[1,109]},o($Vp,[2,49]),o($Vp,[2,50]),{10:[2,14]},o($Vy,$V0,{4:110}),{6:20,8:19,19:111,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},o($Vy,$V0,{4:112}),o($Vy,$V0,{4:113}),{27:[1,114]},{16:[1,115]},{15:[1,116]},o($V1,[2,25]),o($V1,[2,30]),{6:20,8:19,19:117,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{6:20,8:19,19:118,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},o($Vt,[2,3]),o($Vt,[2,5]),{15:[1,119],35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o($V1,[2,27]),o($Vy,$V0,{4:120}),o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,121],18:$V4,21:$V5,24:$V6}),{16:[1,122],35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,123],18:$V4,21:$V5,24:$V6}),o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,124],18:$V4,21:$V5,24:$V6}),{16:[1,125]},o($Vy,$V0,{4:126}),o($V1,[2,24]),{7:[1,127],34:[2,32],35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o($V1,[2,22],{35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo}),o($V1,[2,26]),o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,128],18:$V4,21:$V5,24:$V6}),{10:[2,15]},o([10,13,17,18,20,21,22,23,24,30,31,49],$V0,{4:129}),{10:[2,17]},{10:[2,19]},o($Vy,$V0,{4:130}),o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,131],18:$V4,21:$V5,24:$V6}),{6:20,8:19,19:83,33:132,36:$V8,47:$V9,48:$Va,49:$V7,50:$Vb},{10:[2,13]},o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:$Vu,18:$V4,20:$Vv,21:$V5,22:[1,133],23:[1,134],24:$V6}),o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,135],18:$V4,21:$V5,24:$V6}),{10:[2,11]},{34:[2,33]},{10:[1,136]},{10:[1,137]},{10:[2,20]},{17:[1,138]},{17:[1,139]},o($Vy,$V0,{4:140}),o($Vy,$V0,{4:141}),o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,142],18:$V4,21:$V5,24:$V6}),o($V1,$V2,{9:3,11:4,12:5,13:$V3,17:[1,143],18:$V4,21:$V5,24:$V6}),{10:[2,16]},{10:[2,18]}],
defaultActions: {89:[2,12],93:[2,14],121:[2,15],123:[2,17],124:[2,19],128:[2,13],131:[2,11],132:[2,33],135:[2,20],142:[2,16],143:[2,18]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin('COMMENT'); 
break;
case 1: this.begin('INITIAL'); 
break;
case 2: ; 
break;
case 3: ; 
break;
case 4: this.begin('OTHER_COMMENT'); 
break;
case 5: this.begin('INITIAL'); 
break;
case 6: ; 
break;
case 7:return 38;
break;
case 8:return 39;
break;
case 9:return 36;
break;
case 10:return 35;
break;
case 11:return 40;
break;
case 12:return 14;
break;
case 13:return 15;
break;
case 14:return 'PI';
break;
case 15:return 'E';
break;
case 16:return 37;
break;
case 17:return "!=";
break;
case 18:return 42;
break;
case 19:return 44;
break;
case 20:return 46;
break;
case 21:return 28;
break;
case 22:return 16;
break;
case 23:return 7;
break;
case 24:return 41;
break;
case 25:return 43;
break;
case 26:return 18;
break;
case 27:return 20;
break;
case 28:return 13;
break;
case 29:return 'pass';
break;
case 30:return 30;
break;
case 31:return 17;
break;
case 32:return 31;
break;
case 33:return 26;
break;
case 34:return 27;
break;
case 35:return 29;
break;
case 36:return 47;
break;
case 37:return 21;
break;
case 38:return 22;
break;
case 39:return 23;
break;
case 40:return 32;
break;
case 41:return 34;
break;
case 42:return 24;
break;
case 43:return 25;
break;
case 44:return 50;
break;
case 45: return 49;
break;
case 46: console.log(yy_.yytext); return 48;
break;
case 47: return 10;
break;
case 48: ; 
break;
}
},
rules: [/^(?:''')/,/^(?:''')/,/^(?:\n)/,/^(?:.)/,/^(?:#)/,/^(?:\n)/,/^(?:.)/,/^(?:\*\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:\*)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?::)/,/^(?:,)/,/^(?:<)/,/^(?:>)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:def\b)/,/^(?:pass\b)/,/^(?:print\b)/,/^(?:end\b)/,/^(?:return\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:len\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:\{)/,/^(?:\})/,/^(?:for\b)/,/^(?:in\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z]([a-zA-Z]|[0-9])*)/,/^(?:".*?")/,/^(?:\n)/,/^(?:.)/],
conditions: {"OTHER_COMMENT":{"rules":[0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true},"COMMENT":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = piethon;
exports.Parser = piethon.Parser;
exports.parse = function () { return piethon.parse.apply(piethon, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}